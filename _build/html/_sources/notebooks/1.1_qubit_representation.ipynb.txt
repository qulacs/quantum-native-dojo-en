{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cArDQYeJjDi5"
   },
   "source": [
    "## 1-1. Quantum bit\n",
    "\n",
    "Inside a classical computer (standard computers such as your laptop or desktop), information is represented in two states, 0 and 1. The two states are represented, for example, by the on/off state of a switch, the state in which an electric charge is accumulated or not, or the high/low state of a voltage, etc. \n",
    "<br>On the other hand, quantum mechanics allows for the **overlapping of two different states**. This property is called **superposition**. Thus the smallest unit of information in the quantum world, the **\"quantum\" bit** called **qubit**, is represented by a complex vector:\n",
    "\n",
    "$$\n",
    "\\left(\n",
    "\\begin{array}{c}\n",
    "\\alpha \n",
    "\\\\\n",
    "\\beta \n",
    "\\end{array}\n",
    "\\right)\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "rhuRq2WujDi5"
   },
   "source": [
    "where $\\alpha$ and $\\beta$ are complex numbers that represent the weight of 0 and 1 states of the superposition, and are called **complex probability amplitudes**.\n",
    "The reason why $\\alpha$ and $\\beta$ are complex numbers is that in the quantum world, discrete quantities such as 0 and 1 also have wave characteristics and interfere with each other.\n",
    "\n",
    "The state corresponding to the 0 of the classical bit is\n",
    "\n",
    "$$\n",
    "\\left(\n",
    "\\begin{array}{c}\n",
    "1 \n",
    "\\\\\n",
    "0\n",
    "\\end{array}\n",
    "\\right)\n",
    "$$\n",
    "\n",
    "The state corresponding to the 1 of the classical bit is\n",
    "\n",
    "$$\n",
    "\\left(\n",
    "\\begin{array}{c}\n",
    "0 \n",
    "\\\\\n",
    "1\n",
    "\\end{array}\n",
    "\\right)\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jyz8NYXVjDi6"
   },
   "source": [
    "Since writing column vectors every time is a waste of space, we introduce a simplified notation called **Dirac's bra-ket notation**. This is like a type declaration that a quantum state is a column vector, and when this symbol is attached, it can be easily recognized that it is a complex vector representing a quantum state.\n",
    "\n",
    "$$\n",
    "|0\\rangle = \\left(\n",
    "\\begin{array}{c}\n",
    "1 \n",
    "\\\\\n",
    "0\n",
    "\\end{array}\n",
    "\\right)\n",
    "$$\n",
    "$$\n",
    "|1\\rangle = \\left(\n",
    "\\begin{array}{c}\n",
    "0\n",
    "\\\\\n",
    "1\n",
    "\\end{array}\n",
    "\\right)\n",
    "$$\n",
    "\n",
    "By using Dirac's bra-ket notation, a quantum bit can be written as:\n",
    "\n",
    "$$\n",
    "|\\psi \\rangle = \\alpha |0\\rangle + \\beta |1\\rangle \n",
    "$$",
    "saving space.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qdjvhYqrjDi7"
   },
   "source": [
    "### Meaning of complex probability amplitude"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "beNKd2n8jDi9"
   },
   "source": [
    "What kind of physical entity does the complex probability amplitude correspond to? Actually, in quantum mechanics, the observer (human being) does not have direct access to the complex probability amplitude, which is **probabilistically determined to be 0 or 1 only after an operation called measurement**. Complex probability amplitude affects the probability distribution of the measurement result. $p_0$, the probability that 0 is measured and $p_1$ the probability that 1 is measured are expressed as the square of the absolute value of the complex probability amplitude.\n",
    "\n",
    "$$ \n",
    "p_0 = |\\alpha |^2,\n",
    "\\\\\n",
    "p_1 = |\\beta |^2\n",
    "$$\n",
    "\n",
    "$|\\alpha |^2 + |\\beta |^2 =1$ so that the sum of the probabilities $p_0$ and $p_1$ is 1.\n",
    "\n",
    "**When a measurement is performed, the quantum state changes to the state corresponding to the measurement result**. Specifically, if the measurement result is 0, the state changes to $|0\\rangle$, and if the result is 1, the state changes to $|1\\rangle$. This measurement is called a projective measurement in the orthonormal basis $|0\\rangle$, $|1\\rangle$. There are also projective measurements in orthonormal bases other than $|0\\rangle$ and $|1\\rangle$ and more general measurements, but they are not discussed here.\n",
    "\n",
    "\n",
    "To sum up, \n",
    "\n",
    "- A quantum state is described by a complex vector whose magnitude is normalized to one.\n",
    "- The square of the absolute value of each component is the probability of obtaining the state corresponding to that component when a measurement is made.\n",
    "- The quantum state after the measurement is $|0\\rangle$ or $|1\\rangle$ depending on the measurement result.\n",
    "\n",
    "Therefore,\n",
    "\n",
    "$$\n",
    "|0\\rangle = \\left(\n",
    "\\begin{array}{c}\n",
    "1 \n",
    "\\\\\n",
    "0\n",
    "\\end{array}\n",
    "\\right), |1\\rangle = \\left(\n",
    "\\begin{array}{c}\n",
    "0\n",
    "\\\\\n",
    "1\n",
    "\\end{array}\n",
    "\\right)\n",
    "$$\n",
    "\n",
    "are states where bits are certain to return 0 or 1. These states correspond to classical 0 or 1. In contrast, \n",
    "\n",
    "$$\n",
    "\\frac{1}{\\sqrt{2}}\n",
    "(|0\\rangle + |1\\rangle) = \\left(\n",
    "\\begin{array}{c}\n",
    "\\frac{1}{\\sqrt{2}}\n",
    "\\\\\n",
    "\\frac{1}{\\sqrt{2}}\n",
    "\\end{array}\n",
    "\\right)\n",
    "$$\n",
    "\n",
    "is a state where 0 and 1 are equally combined. If we measure a qubit of this state, we get the result 0 or 1 with the probability of 1/2, completely at random. \n",
    "\n",
    "Since the complex probability amplitude is a complex number, a state like this exists\n",
    "\n",
    "$$\n",
    "\\frac{1}{\\sqrt{2}}(|0\\rangle + i|1\\rangle ) =\n",
    "\\left( \n",
    "\\begin{array}{c}\n",
    "\\frac{1}{\\sqrt{2}}\n",
    "\\\\\n",
    "\\frac{i}{\\sqrt{2}}\n",
    "\\end{array}\n",
    "\\right)\n",
    "$$\n",
    "\n",
    "A more general state like below is also allowed,\n",
    "\n",
    "$$\n",
    "\\frac{1}{\\sqrt{2}} ( |0\\rangle + e^{ i \\phi } |1\\rangle )\n",
    "$$\n",
    "\n",
    "In this state, the probability amplitude for state 0 ($1/\\sqrt{2}$) is a positive real number, while the probability amplitude for state 1 ($e^{i\\phi}/\\sqrt{2}$) is $\\phi$ rotated in the complex plane. Such relative declination between probability amplitudes in superposition states is called **phase** and plays an important role in quantum mechanics in general.\n",
    "\n",
    "(Please check `1.2 Quantum bits` chapter of Nielsen-Chuang for more details)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Oi3PkG3KjDi9"
   },
   "source": [
    "### Representing quantum bit with Sympy\n",
    "\n",
    "SymPy can handle quantum states. To prepare initialized qubits, use the ` Qubit() ` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "U-NFd2sGjDi-"
   },
   "outputs": [],
   "source": [
    "from IPython.display import Image, display_png\n",
    "from sympy import *\n",
    "from sympy.physics.quantum import *\n",
    "from sympy.physics.quantum.qubit import Qubit,QubitBra\n",
    "init_printing() #express vectors and matrices nicely"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "# please run only on Google Colaboratory\n",
    "from IPython.display import HTML\n",
    "def setup_mathjax():\n",
    "    display(HTML('''\n",
    "    <script>\n",
    "        if (!window.MathJax && window.google && window.google.colab) {\n",
    "            window.MathJax = {\n",
    "                'tex2jax': {\n",
    "                    'inlineMath': [['$', '$'], ['\\\\(', '\\\\)']],\n",
    "                    'displayMath': [['$$', '$$'], ['\\\\[', '\\\\]']],\n",
    "                    'processEscapes': true,\n",
    "                    'processEnvironments': true,\n",
    "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
    "                    'displayAlign': 'center',\n",
    "                },\n",
    "                'HTML-CSS': {\n",
    "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
    "                    'linebreaks': {'automatic': true},\n",
    "                    // Disable to prevent OTF font loading, which aren't part of our\n",
    "                    // distribution.\n",
    "                    'imageFont': null,\n",
    "                },\n",
    "               'messageStyle': 'none'\n",
    "            };\n",
    "            var script = document.createElement(\"script\");\n",
    "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
    "            document.head.appendChild(script);\n",
    "        }\n",
    "    </script>\n",
    "    '''))\n",
    "get_ipython().events.register('pre_run_cell', setup_mathjax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "psi = Qubit('0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "23yD1G8LjDjB",
    "outputId": "10f115e7-14df-4157-ef75-bde1a60fcb57"
   },
   "outputs": [],
   "source": [
    "psi # bra-ket notation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mBiG7DB7jDjE",
    "outputId": "edfa2ecb-75fc-427d-9b30-9f93bddd8d1a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABYAAAAyBAMAAACqpzYoAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUMhCrmXbNZt0iu0TKQvJ9AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAnElEQVQoFWOQ//+JAQT0/39kEHZxBbNDXAwZRMAsEOGIyTYMgImzpufD2QwM/QPDLpOftgCrO0HOx+Z+GouHa6nA7Z3MEH0A6gYuAQamCVA2bwID81comz+Bge8zlB1fwMD3A8o+r8DAAowccPifL0CwkdUA9TLD9PJeYOCCmQm0ix1mF8NmhkAHqDkMQR0pcLcBGRSzkdMMUloCAPLfOqgVVhxkAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}1\\\\0\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1⎤\n",
       "⎢ ⎥\n",
       "⎣0⎦"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "represent(psi) # column vector representation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5WFFlU7PjDjI"
   },
   "source": [
    "SymPy can treat characters as symbols, so common qubits can easily be written."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "rFqkqRPgjDjI",
    "outputId": "a68c9e22-ab40-49c6-98c4-b03d84a28e92"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGoAAAAXCAYAAADjndqIAAAABHNCSVQICAgIfAhkiAAABLFJREFUaIHt2V2IVVUUB/CflZlFWkNID6E2lfYQadknfWhWU4alUeRDSYaRWZF9SUVBk1AvEQ5KoWQ1RkUgPQz44EfpWCTZh1k+ZJph2AeVpWmp0efDOoc5c++5M+c6984Y+IfD4p6991r7/tdea6+9T7/m5maHcPDjsBroaMa/GN5DPZckeu7uoZ5aYQAexUbsS54NmF7Sr1lt/j9dcFALR3WFk/ASvsMf2IYWHJ/T9z38hEl1nlMRHIkVeBp/YQEW42QswlUF9dyI+XgXu4UTXu2if0UOjiho8EBwCtZiCNqwCedhFq7GRfg50/8fLMUtGIxf6zi37jALl2IhZgqC4R28houxvICexzEKv+EbnN5N/4oc1DOinhdOuheT8QjGYy5G4qmcMW3ojwk9sDtNEDuuBzruxF48qMNJRHTReYF1hfsxAoOEw4sgl4M8R/XHfSIf7xMrYa5IB0fjB7GqukIjmkSqe66k7Qn8jqk4pqRtZWKzL9PfMDH/t8U8s7gpkasK6lqNLTo7uzvkclCa+hqwDOeKEFyOicJx34rQbBBkd4XxiVyRjMlij8jFTbhAEJJibzLRCWLB/NmNnXrgnESuy7zrJzLDDXgLn9XRfi4HpRH1hnDSLFyLhzFWFAITMBut+LIbYyMTublC+5ZEjshpaxP5eVw3NuqFMYn8GJfhBXwuiqBPxf5Rb5RxkHXUFbhSVCjzM+93iBQ2XlRrcwoYGpzISgVB+v64nLalIgr7Kv2ljvoIM3C7joW3CYf3whzKOMg6amoiW5Tn1P2JXIjtNZhIv0Tm5e4f8T6uK6BnW6Ij+7yctK3OaWstoPNsfC0W6M04QazsNzFFbA31RhkH2T1qrMiHlSayV5wriiCNmMEV2geV9Mtr313ATovyqBwtVuJi4cgsNnSjb5hwzJrk99+iwluTPBtEud2IrwrMryfoxEHqqIEYiq3CIVk0ivp/raj4iuCLRObtQXBaIvP2sEacodiiaMl5N004qhXtBXRkkU17ediZyD1V6q0WZRykqW+gSEelFRpRmg/QcYYogtWJbFJesBwrDrv7RHiXIs3LbVXYqxWyhUQpGsS8N4rbg3qijIOUxJ3i9HwqzswMmKkjT+Zt/JWwVZTmw5XfWz0pzk+vKD+npJP8Hh9WYa9WSB01Rcc+SpwhF4py+dlemEcZB2nqSzfae8Q5YQlOxPU6l4oL8KJiJN4l0uU8XC5K3PNFybsZj+WMaRDXM4tUd0isFVJHTRd73SqRAZpEOmoVe19RTE4egk+4UEdRswMPlYzJ5SBbTMwW56UpuENE2Vxx9XOWiIAZovopgq3i8DhH3O1dI1bJPBFVv+SMmSjK375Ie0NFIbESu8Rx5AFR8KwXPCypUudo3FryrjF5iOqy1FG5HGQdtT8ZVDoQPtD9hWIetuO2KvpPEim46BVNHloVK8NLkUbTSjzTA/tZNCdPNcjloN6fOarBUeLzwTIR2b2N1FHr+8B2ioocHEyOGiWupl7vI/upoz7pI/t0wUE9v0dVi3Uip/cVxog9I2/v7C1U5KAWjmpP5K4a6OpLDDnAce2JrOv/r5Wj2mug5/+Kdr3w/w+mPeoQusB/fz0XBQ0DnmoAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\alpha {\\left|0\\right\\rangle } + \\beta {\\left|1\\right\\rangle }$"
      ],
      "text/plain": [
       "α⋅❘0⟩ + β⋅❘1⟩"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a, b = symbols('alpha, beta') #display alpha, beta by using a, b as symbols\n",
    "ket0 = Qubit('0')\n",
    "ket1 = Qubit('1')\n",
    "psi = a * ket0 + b* ket1\n",
    "psi # a qubit state is displayed in ket representation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dITE71DOjDjM",
    "outputId": "dc31b38a-0c7c-4c74-d700-273442527fb5"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABkAAAAyBAMAAABbrG2lAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUMhB2mUQi3bvNZqsoIwvDAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA6UlEQVQoFWOQ//+JAQyY/v8XYBB2cYXwWF2cBRhEIGwQyUJVnlp6A8LMWQ2skpwGMBuEGBi2swVAeexfGRhqmGC2M25gYFBUhfHiFRgY9A1gPP4LQB7cTPYHDLz1LDBTGJTuXmBXg6kEKgID6vqIbDM5705Aclky6xYEj9eBoRvBm8vAYIXgJTAwvEPmcUjCeRyeZacC4Dw2VqVCBzgPGJZsB+A8NgYGjg9wXgsDA68AnKfAwMD3AM4D6pmIcOdeBpYVDDA5Dl81JaB10BgDWgAGkNBF5YWhyAGtQ1IJ5cBSAUIONUWipFYAaHAu93c9934AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}\\alpha\\\\\\beta\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡α⎤\n",
       "⎢ ⎥\n",
       "⎣β⎦"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "represent(psi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "suKiATZ5jDjP"
   },
   "source": [
    "Of course, specific numerical values can be assigned."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "55qn4NVHjDjP",
    "outputId": "564385b8-150e-4110-fa37-58134acf3abc",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAK8AAAAfCAYAAACRWJ0AAAAABHNCSVQICAgIfAhkiAAABV5JREFUeJzt21msHmMcx/FPFyK22rnohVaoJhIubLXlIKmttLVciDW4oYklCELjVGjcqYrlQigRd8jR2hM9VWtEUiGW0qglSi2xr9W6+M/h7XTmnJn3nXnPOe18k8mc88w8z/P/z+8/zzrvmN7eXg0No5Gxw21AQ0O7jC95/w74qcL6x1RY1pZG1VowyvQo2/KegBOFk1UcDe1TtRajTo+ywduDpTXY0VCeHlu4FmWCd1xy/FWTLQ3FabRQLniPwKt1GdJQikYL5YL3ZDxdlyENpWi0UC54d8V3Fdffiw3Yu4Kyjk7KmlNBWSOdOrSgOj26okXR4N0XH2ak74pL8AQ+xu/4ES/j4hLl5zERD+BL/InVWICdM+59Bd9gZoFy98Q/WKh+H6omTwvq9eVM3IXlYoluAx7JubcrWhRd5z0NizPSz8K9WCNmvp8lxpyO+3FScs+GgvW0so8Y1+2BPnyAQ3GFWCI60satz3oswbmYIJzOY6Z4EE/U7EMd5GlBvb7chAPxC77A/oPc2xUtir6J+2FlRvpK8TAn4hzcgIuEY5/jjKTidrhHBO7lmIXrcRzuwBTclpGnD1sJJwdjtgj8l2r04ULxkHvayDsYeVpQrx5XJXXviEsL3F+7Fq3BOxa3ZlS2i/zx1YuiFVifSv8K9yV/9wxhfBaTMV0ME+5OXbsZv+I8bJe69oLoagbrriaIl2Cx6K7q8qET2tGCen1Zio8Ub7Vr16I1eKdjmmiWW2l3Zvt3cl7XRt7jkvPzNnXkZzGm2haHp679Jh7aSeKtz+IUbI3HC9jRiQ+dULUWdN+X2rVoDd5ncTVmpNKnKb+mOB7nt5RblinJOa97/Cg575dxrU+80T05eWeLlvuFIWzo1IdOqFILhs+XWrVIj3lXiDfmiOT/rURznm79huJ2HCBaiedK5iUcJn+gP5C+U8a1JcLerO5qGzHZewZ/DGFDpz50SlVaMHy+1KpF1oTtyZbKerCslLkxwbparA6cVzJvUQY+Iskaf63F62Lgn2Y6thcz28Eo68PqxJbW48Hk2tKMa4sKlEnnWtAdPfKoVYuspbI+sVxxbVLBvBLGzsGdeA/H4/sSeVsZaFkn5FzfMXVf1vWszwVni+8Bnhqk7nZ8WGDTXuAgEXgPieBuZUWBMulMC6rToxNq0yIreJdhd0wVs/lfChp5pVjGejepaG3BfFkMLMJnjWmJhXqyx8STRRczP5U+DqeKGW1e0Lfrw4KMtAtF8C5Cf8Fy0rSrBdXq0S61apE1bFgnxhZz8U5BI69LKlqBY7MqKsnAp37TM2zcQWxQ/C66pDQD3WxfKv0YsYOT101V7UMVtKMFI8eXWrXI26Tow9nyd3JamSsG1G+JN+TbAnmGYpVYJtvbpvvj80Qr9LCYqaaZKXZo3kylny4mD+kHST0+VEUZLRhZvtSqRd728DN4TWwDDsYFuEXMgpeLwXWa1YpPUFq5TCwLLRROvI/DxJu4Ejdm5NkFR4mtxPRkblZS3tep9Dp9qIKiWlCvL7OSA/ZKztNayvoW17TcX7sWecH7s1hAHopJyXmcGKNksUx7D2sVDhbOnCgW6NeIYJ4ne/IxI7El/UYfIrYc78jIU6cPVVBUC+r15SARXK1MTg741MbBW7sWY4b5p++9Yrt3kk1n5O3wmBgn7ya+Qhtgvtgnn4xPKqhnc6VXdXrUrsVI+9yvE7YRP0p81sYPi1iWeVsTuN2iK1qU/en7SOZA8Q3ooxnXpnbZli2drmixOQXvG2Jc1jD8dEWL4Q7e/uT8w3Aa0fAf/cl5VOgxEoK3f5htaPiffqNIj81pwtawhdEEb8Oo5V+f088drhipNgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\frac{\\sqrt{2} {\\left|0\\right\\rangle }}{2} + \\frac{\\sqrt{2} {\\left|1\\right\\rangle }}{2}$"
      ],
      "text/plain": [
       "√2⋅❘0⟩   √2⋅❘1⟩\n",
       "────── + ──────\n",
       "  2        2   "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "psi.subs([([a,1/sqrt(2)]),([b,1/sqrt(2)])]) # Assign specific numbers to alpha and beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "1_basics_of_quantum_information.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
