{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2-2. Hadamard test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the simplest quantum algorithm, let's consider the following quantum circuit (Figure 1) called the Hadamard test. That is, the first bit is initialized to $|0\\rangle$, the second and subsequent bits are initialized to state $|\\psi\\rangle$,and the Hadamard gate is first applied to the first bit. Then, the control unitary operator $\\Lambda(U)$ (see below) is applied, Hadamard gate is again applied to the first bit, and finally the first bit is measured.\n",
    "\n",
    "![figure 1](figs/2/Hadamard_test.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The control unitary operator $\\Lambda(U)$ is a unitary operation that does nothing when the first qubit is $|0\\rangle$, and apply $U$ when the first qubit is $|1\\rangle$.\n",
    "\n",
    "\n",
    "$$\n",
    "\\Lambda (U) = |0\\rangle \\langle 0| \\otimes I + |1\\rangle \\langle 1|  \\otimes U.\n",
    "$$\n",
    "\n",
    "In other words, depending on whether the first qubit is a $|0\\rangle$ or a $|1\\rangle$, a conditional branch is executed to \"do nothing\" or \"let $U$ act\". In a conventional computer, conditional branches cannot be executed simultaneously, but in a quantum computer, conditional branches can be executed **simultaneously and in parallel** by using superposition of states."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will consider the operation of this Hadamard test. At first, for simplicity, we will consider the case where quantum state $|\\psi \\rangle$ is the eigenstates (eigenvectors) of the eigenvalue $e^{i \\lambda}$ of the unitary operation (matrix) $U$ .\n",
    "\n",
    "\\begin{eqnarray}\n",
    "U|\\psi \\rangle = e^{i \\lambda} |\\psi\\rangle.\n",
    "\\end{eqnarray}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By letting the Hadamard operation $H$ act on the first qubit, we have\n",
    "\n",
    "\\begin{eqnarray}\n",
    "\\frac{1}{\\sqrt{2}} (|0\\rangle  + |1\\rangle) \\otimes |\\psi  \\rangle \n",
    "\\end{eqnarray}\n",
    "\n",
    "Then, by applying the control $U$ operation\n",
    "**eigenvalue** **$e^{i\\lambda}$** **is obtained as the relative phase of the first qubit** (this is called **phase kickback**):\n",
    "\n",
    "\\begin{eqnarray}\n",
    "&&\\frac{1}{\\sqrt{2}} (|0\\rangle \\otimes |\\psi  \\rangle  \n",
    "+ |1\\rangle \\otimes U|\\psi \\rangle )\n",
    "\\\\\n",
    "&=&\\frac{1}{\\sqrt{2}} (|0\\rangle \\otimes |\\psi  \\rangle  \n",
    "+e^{i \\lambda} |1\\rangle \\otimes |\\psi \\rangle )\n",
    "\\\\\n",
    "&=&\n",
    "\\frac{1}{\\sqrt{2}} (|0\\rangle   \n",
    "+e^{i \\lambda} |1\\rangle )\\otimes |\\psi  \\rangle.\n",
    "\\end{eqnarray}\n",
    "\n",
    "Finally, by applying the Hadamard operation to the first qubit, the following state is obtained.\n",
    "\n",
    "\\begin{eqnarray}\n",
    "\\left(\\frac{1+e^{i\\lambda}}{2}|0\\rangle  \n",
    "+\\frac{1-e^{i\\lambda}}{2} |1\\rangle \\right)\\otimes |\\psi  \\rangle \n",
    "\\label{eq01}\n",
    "\\end{eqnarray}\n",
    "\n",
    "The probability of getting the measurement result $m=0,1$ when measuring the first qubit is\n",
    "<span style=\"color:red\"> the square of the coefficients of $|0\\rangle$ and $|1\\rangle$. This can be expressed by using $m$ . (Substitute $m=0,1$ to make sure they match.)</span>\n",
    "\n",
    "\n",
    "\\begin{align}\n",
    "p_{m}=\\left|\\frac{1+(-1)^m e^{i\\lambda}}{2}\\right|^2 \n",
    "=\\color{red}{\\left|\\frac{(1+(-1)^m \\cos{\\lambda})+i (-1)^m \\sin{\\lambda}}{2}\\right|^2\n",
    "=\\frac{2+2 (-1)^m \\cos \\lambda}{4}}\n",
    "=\\frac{1+(-1)^m \\cos \\lambda}{2}\n",
    "\\end{align}\n",
    "\n",
    "$|\\psi \\rangle$, $U$, and $\\langle \\psi |$ are\n",
    "a column vector in $2^n$ dimensions, $2^n \\times 2^n$ matrix, and\n",
    "a row vector in $2^n$ dimensions.\n",
    "If we compute this Hadamard test on a classical computer, exponentially large memory allocation and number of operations are required.\n",
    "On the other hand, on a quantum computer $m$ is sampled under a probability distribution $p_m$.\n",
    "\n",
    "If you want to estimate $\\cos \\lambda$ with a certain error $\\epsilon$, then\n",
    "we only need to sample about a polynomial number of times of the inverse of $\\epsilon$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the same calculation is performed for general inputs, not necessarily eigenvectors, the pre-measurement state is\n",
    "\n",
    "$$\n",
    " |0\\rangle \\frac{I+U}{2} |\\psi \\rangle  +  |1\\rangle  \\frac{I-U}{2} |\\psi \\rangle \n",
    "$$\n",
    "\n",
    "When $p_0$, $p_1$ are the probability of measuring the first bit and obtaining 0 or 1,\n",
    "\n",
    "\\begin{align}\n",
    "p_0 \n",
    "&= \\color{red}{\\left|(|0\\rangle \\langle 0| \\otimes I)(|0\\rangle \\frac{I+U}{2} |\\psi \\rangle + |1\\rangle  \\frac{I-U}{2}|\\psi \\rangle)\\right|^2} \\\\\n",
    "&= \\color{red}{\\left||0\\rangle \\frac{I+U}{2} |\\psi \\rangle \\right|^2} \\\\\n",
    "&= \\color{red}{\\left||0\\rangle \\right|^2 \\left|\\frac{I+U}{2} |\\psi \\rangle \\right|^2} \\\\\n",
    "&= \\color{red}{\\frac{\\langle \\psi | (I + U ^ \\dagger) (I + U) | \\psi \\rangle }{4}} \\\\\n",
    "&= \\color{red}{\\frac{\\langle \\psi | (I + U + U ^ \\dagger + U ^ \\dagger U) | \\psi \\rangle }{4}} \\\\\n",
    "&= \\color{red}{\\frac{ \\langle \\psi | 2I | \\psi \\rangle + \\langle \\psi | U | \\psi \\rangle + \\langle \\psi | U ^ \\dagger | \\psi \\rangle}{4}} \\\\\n",
    "&= \\color{red}{\\frac{ 2 + \\langle \\psi | U | \\psi \\rangle + \\overline{\\langle \\psi | U | \\psi \\rangle}}{4}} \\\\\n",
    "&= \\frac{1+ {\\rm Re} \\langle \\psi | U | \\psi \\rangle }{2} \\\\\n",
    "p_1 &= \\frac{1- {\\rm Re} \\langle \\psi | U | \\psi \\rangle }{2} \\tag{1}\n",
    "\\end{align}\n",
    "\n",
    "In other words, if you run the Hadamard test on a quantum computer, you can **estimate the value of unitary matrix** **$U$** **sandwiched between vector** **$| \\psi \\rangle$** by taking the sample average of the measurement results. If the same value were to be obtained with a classical computer, it would take exponential time because the dimension of the vector or matrix grows exponentially as the number of qubits $n$ grows."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After measuring the first qubit, the second qubit will be in the following state according to the measurement result $m = 0, 1$ (normalization factors are omitted)\n",
    "\n",
    "$$\n",
    "|\\psi_0\\rangle = \\frac{I + U}{2}|\\psi\\rangle,\n",
    "\\quad\n",
    "|\\psi_1\\rangle = \\frac{I - U}{2}|\\psi\\rangle.\n",
    "$$\n",
    "\n",
    "Now consider the case where $U$ is a one-qubit unitary operation and its eigenvalues are $\\pm 1$. Using the eigenvectors $|u_1\\rangle$ and $|u_{-1}\\rangle$ corresponding to the eigenvalue $\\pm 1$, $|\\psi\\rangle$ can be written as follow. $|\\psi\\rangle = c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle$ . By substituting this to the state after measurement $|\\psi_0\\rangle$ and $|\\psi_1\\rangle$, \n",
    "\n",
    "\\begin{align}\n",
    "\\color{red}{|\\psi_0\\rangle}\n",
    "&= \\color{red}{\\frac{I + U}{2}|\\psi\\rangle} \\\\\n",
    "&= \\color{red}{\\frac{I + U}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle)} \\\\\n",
    "&= \\color{red}{\\frac{I}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle) + \\frac{U}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle)} \\\\\n",
    "&= \\color{red}{\\frac{1}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle) + \\frac{1}{2}(c_1U|u_1\\rangle + c_{-1}U|u_{-1}\\rangle) }\\\\\n",
    "&= \\color{red}{\\frac{1}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle) + \\frac{1}{2}(c_1|u_1\\rangle - c_{-1}|u_{-1}\\rangle)} \\\\\n",
    "&= \\color{red}{c_1|u_1\\rangle}\\\\\n",
    "\\end{align}\n",
    "\n",
    "\\begin{align}\n",
    "\\color{red}{|\\psi_1\\rangle }\n",
    "&= \\color{red}{\\frac{I - U}{2}|\\psi\\rangle} \\\\\n",
    "&= \\color{red}{\\frac{I - U}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle)} \\\\\n",
    "&= \\color{red}{\\frac{I}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle) - \\frac{U}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle)} \\\\\n",
    "&= \\color{red}{\\frac{1}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle) - \\frac{1}{2}(c_1U|u_1\\rangle + c_{-1}U|u_{-1}\\rangle)} \\\\\n",
    "&= \\color{red}{\\frac{1}{2}(c_1|u_1\\rangle + c_{-1}|u_{-1}\\rangle) - \\frac{1}{2}(c_1|u_1\\rangle - c_{-1}|u_{-1}\\rangle)} \\\\\n",
    "&= \\color{red}{c_{-1}|u_{-1}\\rangle}\\\\\n",
    "\\end{align}\n",
    "\n",
    "<span style=\"color:red\">When we apply U to $|\\psi_0\\rangle$ and $|\\psi_1\\rangle$,</span>\n",
    "\n",
    "\\begin{align}\n",
    "\\color{red}{U|\\psi_0\\rangle }\n",
    "&= \\color{red}{U(c_1|u_1\\rangle)}\\\\\n",
    "&= \\color{red}{c_1(U|u_1\\rangle)}\\\\\n",
    "&= \\color{red}{c_1|u_1\\rangle}\\\\\n",
    "&= \\color{red}{|\\psi_0\\rangle} \\\\\n",
    "\\end{align}\n",
    "\n",
    "\\begin{align}\n",
    "\\color{red}{U|\\psi_1\\rangle}\n",
    "&= \\color{red}{U(c_{-1}|u_{-1}\\rangle)}\\\\\n",
    "&= \\color{red}{c_{-1}(U|u_{-1}\\rangle)}\\\\\n",
    "&= \\color{red}{(-1)c_{-1}|u_{-1}\\rangle}\\\\\n",
    "&= \\color{red}{-|\\psi_1\\rangle} \\\\\n",
    "\\end{align}\n",
    "\n",
    "\n",
    "it turns out that they are the eigenstates corresponding to the eigenvalue $\\pm 1$, respectively. Even when the eigenvalue is not $\\pm 1$, the state converges to the eigenstate of $U$ when the output of the Hadamard test is repeated as input (those interested are encouraged to try the following example)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation in SymPy\n",
    "As a concrete example, let us consider the case $U=H$ (Hadamard gate). Assume that the auxiliary qubit is $|0\\rangle$ and the input of the Hadamard test $|\\psi\\rangle$ is also $|0\\rangle$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "from sympy.physics.quantum import *\n",
    "from sympy.physics.quantum.qubit import Qubit,QubitBra\n",
    "init_printing() # to show vectors and matrices nicely\n",
    "from sympy.physics.quantum.gate import X,Y,Z,H,S,T,CNOT,SWAP,CPHASE,CGateS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run only on Google Colaboratory\n",
    "from IPython.display import HTML\n",
    "def setup_mathjax():\n",
    "    display(HTML('''\n",
    "    <script>\n",
    "        if (!window.MathJax && window.google && window.google.colab) {\n",
    "            window.MathJax = {\n",
    "                'tex2jax': {\n",
    "                    'inlineMath': [['$', '$'], ['\\\\(', '\\\\)']],\n",
    "                    'displayMath': [['$$', '$$'], ['\\\\[', '\\\\]']],\n",
    "                    'processEscapes': true,\n",
    "                    'processEnvironments': true,\n",
    "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
    "                    'displayAlign': 'center',\n",
    "                },\n",
    "                'HTML-CSS': {\n",
    "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
    "                    'linebreaks': {'automatic': true},\n",
    "                    // Disable to prevent OTF font loading, which aren't part of our\n",
    "                    // distribution.\n",
    "                    'imageFont': null,\n",
    "                },\n",
    "               'messageStyle': 'none'\n",
    "            };\n",
    "            var script = document.createElement(\"script\");\n",
    "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
    "            document.head.appendChild(script);\n",
    "        }\n",
    "    </script>\n",
    "    '''))\n",
    "get_ipython().events.register('pre_run_cell', setup_mathjax)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "state = Qubit('00')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The matrix representation of control H operation is displayed with `CGateS()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\left[\\begin{matrix}1 & 0 & 0 & 0\\\\0 & 1 & 0 & 0\\\\0 & 0 & \\frac{\\sqrt{2}}{2} & \\frac{1}{\\sqrt{2}}\\\\0 & 0 & \\frac{1}{\\sqrt{2}} & - \\frac{\\sqrt{2}}{2}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "⎡1  0  0    0  ⎤\n",
       "⎢              ⎥\n",
       "⎢0  1  0    0  ⎥\n",
       "⎢              ⎥\n",
       "⎢      √2   1  ⎥\n",
       "⎢0  0  ──   ── ⎥\n",
       "⎢      2    √2 ⎥\n",
       "⎢              ⎥\n",
       "⎢      1   -√2 ⎥\n",
       "⎢0  0  ──  ────⎥\n",
       "⎣      √2   2  ⎦"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ctrlH = CGateS(1,H(0))\n",
    "represent(ctrlH,nqubits=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before the measurement, the state is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle H_{1} C_{1}{\\left(H_{0}\\right)} H_{1} {\\left|00\\right\\rangle }$"
      ],
      "text/plain": [
       "H ⋅C ⎛H ⎞⋅H ⋅❘00⟩\n",
       " 1  1⎝ 0⎠  1     "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H(1)*ctrlH*H(1)*state"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculations with SymPy gives us"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\frac{\\sqrt{2} {\\left|00\\right\\rangle }}{4} + \\frac{{\\left|00\\right\\rangle }}{2} + \\frac{\\sqrt{2} {\\left|01\\right\\rangle }}{4} - \\frac{\\sqrt{2} {\\left|10\\right\\rangle }}{4} + \\frac{{\\left|10\\right\\rangle }}{2} - \\frac{\\sqrt{2} {\\left|11\\right\\rangle }}{4}$"
      ],
      "text/plain": [
       "√2⋅❘00⟩   ❘00⟩   √2⋅❘01⟩   √2⋅❘10⟩   ❘10⟩   √2⋅❘11⟩\n",
       "─────── + ──── + ─────── - ─────── + ──── - ───────\n",
       "   4       2        4         4       2        4   "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qapply(H(1)*ctrlH*H(1)*state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using SymPy's `measure_partial` function introduced in Chapter 1, post-measurement state and probability of getting 0 from measurement of the first qubit is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <script>\n",
       "        if (!window.MathJax && window.google && window.google.colab) {\n",
       "            window.MathJax = {\n",
       "                'tex2jax': {\n",
       "                    'inlineMath': [['$', '$'], ['\\(', '\\)']],\n",
       "                    'displayMath': [['$$', '$$'], ['\\[', '\\]']],\n",
       "                    'processEscapes': true,\n",
       "                    'processEnvironments': true,\n",
       "                    'skipTags': ['script', 'noscript', 'style', 'textarea', 'code'],\n",
       "                    'displayAlign': 'center',\n",
       "                },\n",
       "                'HTML-CSS': {\n",
       "                    'styles': {'.MathJax_Display': {'margin': 0}},\n",
       "                    'linebreaks': {'automatic': true},\n",
       "                    // Disable to prevent OTF font loading, which aren't part of our\n",
       "                    // distribution.\n",
       "                    'imageFont': null,\n",
       "                },\n",
       "               'messageStyle': 'none'\n",
       "            };\n",
       "            var script = document.createElement(\"script\");\n",
       "            script.src = \"https://colab.research.google.com/static/mathjax/MathJax.js?config=TeX-AMS_HTML-full,Safe\";\n",
       "            document.head.appendChild(script);\n",
       "        }\n",
       "    </script>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$\\displaystyle \\left( \\sqrt{\\frac{\\sqrt{2}}{4} + \\frac{1}{2}} {\\left|00\\right\\rangle } + \\frac{\\sqrt{2} {\\left|01\\right\\rangle }}{4 \\sqrt{\\frac{\\sqrt{2}}{4} + \\frac{1}{2}}}, \\  \\frac{1}{8 \\left(\\left(\\frac{1}{2} - \\frac{\\sqrt{2}}{4}\\right)^{2} + \\frac{1}{4} + \\left(\\frac{\\sqrt{2}}{4} + \\frac{1}{2}\\right)^{2}\\right)} + \\frac{\\left(\\frac{\\sqrt{2}}{4} + \\frac{1}{2}\\right)^{2}}{\\left(\\frac{1}{2} - \\frac{\\sqrt{2}}{4}\\right)^{2} + \\frac{1}{4} + \\left(\\frac{\\sqrt{2}}{4} + \\frac{1}{2}\\right)^{2}}\\right)$"
      ],
      "text/plain": [
       "⎛                                                                             \n",
       "⎜                                                                            ⎛\n",
       "⎜    ________                                                                ⎜\n",
       "⎜   ╱ √2   1            √2⋅❘01⟩                    1                         ⎝\n",
       "⎜  ╱  ── + ─ ⋅❘00⟩ + ──────────────, ───────────────────────────── + ─────────\n",
       "⎜╲╱   4    2               ________    ⎛        2               2⎞           2\n",
       "⎜                         ╱ √2   1     ⎜⎛1   √2⎞    1   ⎛√2   1⎞ ⎟   ⎛1   √2⎞ \n",
       "⎜                    4⋅  ╱  ── + ─   8⋅⎜⎜─ - ──⎟  + ─ + ⎜── + ─⎟ ⎟   ⎜─ - ──⎟ \n",
       "⎝                      ╲╱   4    2     ⎝⎝2   4 ⎠    4   ⎝4    2⎠ ⎠   ⎝2   4 ⎠ \n",
       "\n",
       "       2        ⎞\n",
       "√2   1⎞         ⎟\n",
       "── + ─⎟         ⎟\n",
       "4    2⎠         ⎟\n",
       "────────────────⎟\n",
       "               2⎟\n",
       "   1   ⎛√2   1⎞ ⎟\n",
       " + ─ + ⎜── + ─⎟ ⎟\n",
       "   4   ⎝4    2⎠ ⎠"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sympy.physics.quantum.qubit import measure_all, measure_partial, measure_all_oneshot, measure_partial_oneshot\n",
    "measured_state_and_probability_zero = measure_partial(qapply(H(1)*ctrlH*H(1)*state),(1,))[0]\n",
    "simplify(measured_state_and_probability_zero)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because $\\langle 0 | H | 0\\rangle = 1/\\sqrt{2}$ , we see that the measurement probability is consistent with equation (1).   \n",
    "Also, when we let $H$ act on the second qubit, we see that the state after the measurement is an eigenvector of $H$ (note that the SymPy index correspond so that the first qubit from the left is 1 and the second one is 0.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\frac{\\sqrt{2} {\\left|00\\right\\rangle } + 2 {\\left|00\\right\\rangle } + \\sqrt{2} {\\left|01\\right\\rangle }}{2 \\sqrt{\\sqrt{2} + 2}}$"
      ],
      "text/plain": [
       "√2⋅❘00⟩ + 2⋅❘00⟩ + √2⋅❘01⟩\n",
       "──────────────────────────\n",
       "           ________       \n",
       "       2⋅╲╱ √2 + 2        "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "measured_state_zero = measured_state_and_probability_zero[0]\n",
    "simplify(qapply(H(0)*measured_state_zero))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, if you get a measurement result of 1 from the first qubit, we can confirm that the post measurement state is an eigenstate with eigenvalue -1. Please check this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALYAAAA0CAYAAAAniMLXAAAABHNCSVQICAgIfAhkiAAABaZJREFUeJzt3EmoHEUcx/FPjMshKqLiFlwQEQ/uO4pxFIJG1HhwwSWiIIiiHjypeHheBHFBRYLgRRHEBQ9J1IgoRkVxQVwRFcEFFJe4RnFJRA81o5N+PdM13TPT0zP1healK1U1//q9/6uurun+LZibm5NITBtb1B1AQzgG/1Q4poUqOoyVLcf9gQ3lKCyoO4gJoDE6pBm7mIXYWHcQE0CjdEiJXczxeKXuICaARukwysRu4bMR9b0CB4yo7ywH4b0K7VtGo8M4NaCaDi1jzoWyiX093sAv+A5rcGBEuyXtul8JNxRn96h3JT7FH3gTJ2T+/9h2nXGQd+NTdvw0UwPm61BFA+J0iKmTq0PZxG5hJY7DydiEZ7FjQbtFeAdX9alzHu7CzTgML2Mt9uqqswrLB4j3fswNUL/D/vgop7yl3Phpngbk69BSXgPidIipk6tD2V2RUzLnK/CzsA5b06fd2vbRj2uFX8J97fNrsAxXCLMEPI8dhF/6W7FBR3AxvseT7fMT27FkKTt+Jl8D4nSoogFxOsTUydVhWGvs7dp9/VCxn61xBJ7JlD8jzAwdNgoDHmTGKmIbfIsLusq2ErcTMKzxU68GlNdhmBoMQq4Ow0rsO/E2Xq3Yz87CttI3mfJvsFumbNBLcRF/4mnsLVzJdsL6yLbDGj/1akB5HYapwaDM06E7secUf3vUyun0VmGRfw7+HlKg2RuVBTlla3EwFue0vwG/dh0X5pRlb8Y6vCSMZ6n5s2Yeoxg/9WrAYDqMSoNY5unQvca+Bw8XdPBF5vx2XIST8MkQAlwvCJOdmXYxfwbbE7/Jn03uxaNd57fgS9zdVfZljxhW4Xx8iJ8K4h32+JkMDYjXYRQaDMo8HboTe734Sy9BoPOEAX0wjOjwl7C1tRSPdZUvxeOZusuFS+afOf38YPO13ob2eYzwrwk7Eu8U1BvF+JkMDYjTYVQaDMo8HcruiqwU/krPEsTqzC6dS1wvtsV+Xef74NB2H52rwR14EK8L21yXYw9hBupmubCuGzb/4F2s61On7PhphgYU61BFA+J0iKlDjg5lE/uK9s/nMuU36b9XeqSwPdPh1vbPB3BJ+9+PCDcsN2J3vI/T8HlXu8U4BE8NFnY01wnbXb0oO36aowH9daiiAXE6xNTJ1aFsYpd9wmtdZNuV7aMXZwo3Nz9Gfu4lkfU69Etqqj3hti6yfd0a0F+Hqk/5rYvoI6ZOrg5NfQhqOVbXHUTNJA0CuTo09XnsU+sOYAJIGgRydVjYarVG+aE/qWfDftJIOoxZgwXpncfENNLUNXYi0ZeU2ImppHPzOE1vUicS/yV2I948TiRiSUuRxFSSEjue7bFr3UEk4kiJHc8KfK2aI9SkHVNLU795rIMDpXuRxpBm7Di2FWwGEg0hJXYcp4p7TSwxIaTEjmMJXqw7iEQ8KbGLWSisrSfNkDFZG/ch3TwWc5zJNGNsjKVvHaQZu5hlit2Ixk2jLH3rICV2MTsotmEYN42y9K2DlNj/czUOz5T1MqWsm6rWxlPPrCR2keXt6bgM52banaH3e4VVbXSrMGxr46ljVhK7pb/l7ROCw2nWB29fwaO6TJ+jYhTWxlPHrOyKxFjeviA85LQ/PhZ8PfrZD1S10Y1lHNbGU8eszNhZ8ixvN9ncjvY0g5nRjMJGd1KsjRvHrCZ2L8vbVYIBCxwt+NdV7bMKk2Jt3DhmMbH7Wd6uFUzXFwuzYuw3dDE2unPK2TQzOdbGjWFW1tgdiixvNwjPhNyOh4bUZ4cyNs0d6rY2bhyzlNixlrercRsuHWKfDG7T3E3d1saNY1YSexDL29XCDsPvQ+yzKqO2Np46ZsUJqtdauZfl7SLBIX+YfValaPtx3PFMNLMyYw/6FFxRUpfpsyqjtDaeOmZxVyQxA6TETkwlKbETU0lK7MRU8i+Z0E1Eo+PHGgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\frac{- 2 {\\left|10\\right\\rangle } + \\sqrt{2} {\\left|10\\right\\rangle } + \\sqrt{2} {\\left|11\\right\\rangle }}{2 \\sqrt{2 - \\sqrt{2}}}$"
      ],
      "text/plain": [
       "-2⋅❘10⟩ + √2⋅❘10⟩ + √2⋅❘11⟩\n",
       "───────────────────────────\n",
       "            ________       \n",
       "        2⋅╲╱ 2 - √2        "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "measured_state_one = measure_partial(qapply(H(1)*ctrlH*H(1)*state),(1,))[1][0]\n",
    "simplify(qapply(H(0)*measured_state_one))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
